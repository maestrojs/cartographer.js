(function(context) {
/*
  cartographer
  author: Alex Robson <@A_Robson>
  License: MIT ( http://www.opensource.org/licenses/mit-license )
  Version: 0.1.0
*/
var SourceResolver, resolver;
SourceResolver = function() {
  var checkPage, self, sources;
  self = this;
  sources = [];
  checkPage = function(name) {
    var defaultElement, templateElement;
    templateElement = $('#' + name + '-template > :only-child');
    defaultElement = $('#' + name);
    if (templateElement.length > 0) {
      return templateElement[0];
    } else if (defaultElement.length > 0) {
      return defaultElement[0];
    } else {
      return null;
    }
  };
  this.addSource = function(source) {
    return sources.push(source);
  };
  this.resolve = function(name, onFound, notFound) {
    var finder, index, onPage;
    onPage = checkPage(name);
    if (onPage) {
      return onFound(onPage);
    } else {
      index = 0;
      return finder = function() {
        return sources[index].resolve(name, function(x) {
          return onFound($(x)[0], function() {
            index++;
            return finder();
          });
        });
      };
    }
  };
  return self;
};
resolver = new SourceResolver();
var Cartographer;
Cartographer = function() {
  var self;
  self = this;
  postal.channel("cartographer").subscribe(function(m) {
    if (m.map) {
      return self.map(m.name, m.namespace);
    } else if (m.apply) {
      return self.apply(m.template, m.proxy, m.render, m.error);
    }
  });
  this.templates = {};
  this.map = function(name, namespace) {
    var template;
    template = new Template(name, namespace);
    return this.templates[name] = template;
  };
  this.apply = function(template, proxy, render, error) {
    var templateInstance;
    template = template || (template = proxy.__template__);
    templateInstance = this.templates[template];
    if (templateInstance) {
      return templateInstance.apply(proxy, function(result) {
        if (render) {
          return render(result, templateInstance.fqn);
        } else {
          return $('#' + templateInstance.name).replaceWith(result);
        }
      });
    } else if (error) {
      return error();
    }
  };
  return self;
};
context["cartographer"] = new Cartographer();
false
})(window);